package com.example.myapplication.ui;

import android.Manifest;
import android.app.Activity;
import android.bluetooth.BluetoothAdapter;
import android.bluetooth.BluetoothDevice;
import android.bluetooth.BluetoothManager;
import android.bluetooth.le.BluetoothLeScanner;
import android.bluetooth.le.ScanCallback;
import android.bluetooth.le.ScanResult;
import android.content.BroadcastReceiver;
import android.content.ComponentName;
import android.content.Context;
import android.content.Intent;
import android.content.IntentFilter;
import android.content.ServiceConnection;
import android.content.SharedPreferences;
import android.content.pm.PackageManager;
import android.os.Build;
import android.os.Bundle;
import android.os.Handler;
import android.os.IBinder;
import android.text.TextUtils;
import android.util.Log;
import android.view.View;
import android.widget.Button;
import android.widget.ImageButton;
import android.widget.TextView;
import android.widget.Toast;

import androidx.activity.EdgeToEdge;
import androidx.activity.result.ActivityResultLauncher;
import androidx.activity.result.contract.ActivityResultContracts;
import androidx.annotation.NonNull;
import androidx.appcompat.app.AppCompatActivity;
import androidx.core.app.ActivityCompat;

import com.example.myapplication.BlePermissionCheck;
import com.example.myapplication.BleService;
import com.example.myapplication.BloodPressureChart;
import com.example.myapplication.ByteUtils;
import com.example.myapplication.R;
import com.example.myapplication.database.dao.MeasurementDAO;
import com.github.mikephil.charting.charts.LineChart;

public class BloodPressureMeasureActivity extends AppCompatActivity implements View.OnClickListener {
    private static final String TAG = "BloodPressureMeasure";

    // UIÁªÑ‰ª∂
    private ImageButton btnBack;
    private TextView tvDeviceName;
    private TextView tvConnectionStatus;
    private TextView currentXueya;
    private TextView tvSystolic;
    private TextView tvDiastolic;
    private TextView tvPulse;
    private Button btnSaveData;
    private LineChart lineChart;
    private BloodPressureChart chartHelper;

    // ËìùÁâôÁõ∏ÂÖ≥
    private BluetoothManager myBluetoothManager;
    private BluetoothAdapter myBluetoothAdapter;
    private BluetoothLeScanner bluetoothLeScanner;
    private ActivityResultLauncher<Intent> enableBluetoothLauncher;
    private BleService myBleService;
    private BleReceiver myBleReceiver;
    private boolean isScanning = false;

    // Êï∞ÊçÆÁõ∏ÂÖ≥
    private String deviceName;
    private MeasurementDAO measurementDAO;
    private int currentSystolic = 0;
    private int currentDiastolic = 0;
    private int currentPulse = 0;

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        EdgeToEdge.enable(this);
        setContentView(R.layout.activity_blood_pressure_measure);

        getIntentData();
        initViews();
        setupClickListeners();
        initDatabase();

        // Ê£ÄÊü•ÊùÉÈôêÂπ∂ÂàùÂßãÂåñËìùÁâô
        if (!BlePermissionCheck.hasPerMissions(this)) {
            if (BlePermissionCheck.shouldShowRationale(this)) {
                BlePermissionCheck.showRationale(this);
            }
            BlePermissionCheck.requestPermissions(this);
            return;
        } else {
            initBle();
            registerBleReceiver();
        }
    }

    private void getIntentData() {
        deviceName = getIntent().getStringExtra("device_name");
        if (deviceName == null) {
            deviceName = "Ë°ÄÂéãËÆ°";
        }
    }

    private void initViews() {
        btnBack = findViewById(R.id.btn_back);
        tvDeviceName = findViewById(R.id.tv_device_name);
        tvConnectionStatus = findViewById(R.id.tv_connection_status);
        currentXueya = findViewById(R.id.current_value_xueya);
        tvSystolic = findViewById(R.id.tv_systolic);
        tvDiastolic = findViewById(R.id.tv_diastolic);
        tvPulse = findViewById(R.id.tv_pulse);
        btnSaveData = findViewById(R.id.btn_save_data);
        lineChart = findViewById(R.id.chart_bp);

        // ËÆæÁΩÆËÆæÂ§áÂêçÁß∞
        tvDeviceName.setText(deviceName);
        updateConnectionStatus(false);

        // ÂàùÂßãÂåñÂõæË°®
        chartHelper = new BloodPressureChart(this, lineChart);
    }

    private void setupClickListeners() {
        btnBack.setOnClickListener(this);
        btnSaveData.setOnClickListener(this);
    }

    private void initDatabase() {
        measurementDAO = new MeasurementDAO(this);
    }

    private void initBle() {// ÂàùÂßãÂåñËìùÁâô - ÂÆåÂÖ®ÊåâÁÖßÊóßÁâàÊú¨MainActivityÁöÑÈÄªËæë
        myBluetoothManager = (BluetoothManager) getSystemService(Context.BLUETOOTH_SERVICE);
        if (myBluetoothManager == null) {
            Toast.makeText(this, "ËìùÁâôÁî®‰∏ç‰∫Ü", Toast.LENGTH_LONG).show();
            return;
        }
        myBluetoothAdapter = myBluetoothManager.getAdapter();
        if (myBluetoothAdapter == null) {
            Toast.makeText(this, "ËÆæÂ§á‰∏çÊîØÊåÅËìùÁâô", Toast.LENGTH_LONG).show();
            return;
        }

        // Ê≥®ÂÜåActivityResultLauncher
        enableBluetoothLauncher = registerForActivityResult(
                new ActivityResultContracts.StartActivityForResult(),
                result -> {
                    if (result.getResultCode() == Activity.RESULT_OK) {
                        scanBleDevice();
                    } else {
                        Toast.makeText(this, "ËìùÁâôÊú™ÂêØÁî®ÔºåÊ≤°Ê≥ïÊâ´Êèè", Toast.LENGTH_SHORT).show();
                    }
                }
        );

        if (!myBluetoothAdapter.isEnabled()) {
            Intent intent = new Intent(BluetoothAdapter.ACTION_REQUEST_ENABLE);
            enableBluetoothLauncher.launch(intent);
            return;
        }
        scanBleDevice();
        Toast.makeText(this, "ËìùÁâôÂ∑≤ÂêØÂä®", Toast.LENGTH_SHORT).show();
    }

    // Ê∑ªÂä†HandlerÂèòÈáè
    private Handler scanTimeoutHandler = new Handler();
    private Runnable scanTimeoutRunnable;

    private void scanBleDevice() {// ÊêúÁ¥¢ËìùÁâôËÆæÂ§á
        if (ActivityCompat.checkSelfPermission(this, Manifest.permission.BLUETOOTH_SCAN)
                != PackageManager.PERMISSION_GRANTED) {
            Toast.makeText(this, "BleÊùÉÈôêÊú™Êéà‰∫à", Toast.LENGTH_SHORT).show();
            return;
        }

        bluetoothLeScanner = myBluetoothAdapter.getBluetoothLeScanner();
        if (bluetoothLeScanner == null) {
            Toast.makeText(this, "Êó†Ê≥ïËé∑ÂèñBLEÊâ´ÊèèÂô®", Toast.LENGTH_SHORT).show();
            return;
        }
        if (isScanning) return;
        isScanning = true;

        Toast.makeText(this, "Ê≠£Âú®ÊêúÁ¥¢" + deviceName + "...", Toast.LENGTH_SHORT).show();
        updateConnectionStatus(false, "Ê≠£Âú®ÊêúÁ¥¢...");

        bluetoothLeScanner.startScan(myScanCallback);

        // ÂàõÂª∫Ë∂ÖÊó∂‰ªªÂä°
        scanTimeoutRunnable = new Runnable() {// ÊêúÁ¥¢10sÔºåÊâæ‰∏çÁùÄÊãâÂÄí
            @Override
            public void run() {
                if (ActivityCompat.checkSelfPermission(BloodPressureMeasureActivity.this, Manifest.permission.BLUETOOTH_SCAN)
                        != PackageManager.PERMISSION_GRANTED) {
                    return;
                }
                bluetoothLeScanner.stopScan(myScanCallback);
                isScanning = false;
                updateConnectionStatus(false, "Êú™ÊâæÂà∞ËÆæÂ§á");
                Toast.makeText(BloodPressureMeasureActivity.this, "Êú™ÊâæÂà∞" + deviceName + "ÔºåËØ∑Á°Æ‰øùËÆæÂ§áÂ∑≤ÂºÄÂêØ", Toast.LENGTH_LONG).show();
            }
        };
        scanTimeoutHandler.postDelayed(scanTimeoutRunnable, 10000);
    }

    private final ScanCallback myScanCallback = new ScanCallback() {
        @Override
        public void onScanResult(int callbackType, ScanResult result) {
            BluetoothDevice device = result.getDevice();
            if (ActivityCompat.checkSelfPermission(BloodPressureMeasureActivity.this, Manifest.permission.BLUETOOTH_SCAN)
                    != PackageManager.PERMISSION_GRANTED) {
                return;
            }
            String deviceName = device.getName();

            // Âè™ËøûÊé•Ë°ÄÂéãËÆ°
            if (deviceName != null && deviceName.equals("BM100B")) {
                // üî• ÊâæÂà∞ÁõÆÊ†áËÆæÂ§áÔºåÁ´ãÂç≥ÂèñÊ∂àË∂ÖÊó∂Handler
                if (scanTimeoutHandler != null && scanTimeoutRunnable != null) {
                    scanTimeoutHandler.removeCallbacks(scanTimeoutRunnable);
                }

                // ÂÅúÊ≠¢Êâ´Êèè
                bluetoothLeScanner.stopScan(myScanCallback);
                isScanning = false;

                updateConnectionStatus(false, "Ê≠£Âú®ËøûÊé•...");
                Toast.makeText(BloodPressureMeasureActivity.this, "ÊâæÂà∞" + deviceName + "ÔºåÊ≠£Âú®ËøûÊé•...", Toast.LENGTH_SHORT).show();

                // ËøûÊé•Ë°ÄÂéãËÆ°
                myBleService.connect(myBluetoothAdapter, device.getAddress());
            }
        }

        @Override
        public void onScanFailed(int errorCode) {
            Toast.makeText(BloodPressureMeasureActivity.this, "Êâ´ÊèèÂ§±Ë¥•" + errorCode, Toast.LENGTH_SHORT).show();
        }
    };

    private void registerBleReceiver() {// Ê≥®ÂÜåËìùÁâôÊï∞ÊçÆÊé•Êî∂Âô® - ÂÆåÂÖ®ÊåâÁÖßÊóßÁâàÊú¨MainActivityÁöÑÈÄªËæë
        // ÁªëÂÆöÊúçÂä°
        Intent intent = new Intent(this, BleService.class);
        bindService(intent, myServiceConnection, Context.BIND_AUTO_CREATE);
        startService(intent);

        // Ê≥®ÂÜåËìùÁâô‰ø°ÊÅØÂπøÊí≠Êé•Êî∂Âô®
        IntentFilter filter = new IntentFilter();
        filter.addAction(BleService.ACTION_GATT_CONNECTED);
        filter.addAction(BleService.ACTION_GATT_DISCONNECTED);
        filter.addAction(BleService.ACTION_GATT_SERVICES_DISCOVERD);
        filter.addAction(BleService.ACTION_DATA_AVAILABLE);
        filter.addAction(BleService.ACTION_CONNECTING_FAIL);
        myBleReceiver = new BleReceiver();
        // >= API 26
        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.O) {
            registerReceiver(myBleReceiver, filter, Context.RECEIVER_NOT_EXPORTED);
        }
    }

    // ÊúçÂä° - ÂÆåÂÖ®ÊåâÁÖßÊóßÁâàÊú¨MainActivityÁöÑÈÄªËæë
    private ServiceConnection myServiceConnection = new ServiceConnection() {
        public void onServiceConnected(ComponentName classname, IBinder rawBinder) {
            myBleService = ((BleService.LocalBinder) rawBinder).getService();
        }

        public void onServiceDisconnected(ComponentName classname) {
            myBleService = null;
        }
    };

    // ËìùÁâôÊï∞ÊçÆÊé•Êî∂Âô® - ÂÆåÂÖ®ÊåâÁÖßÊóßÁâàÊú¨MainActivityÁöÑÈÄªËæë
    private class BleReceiver extends BroadcastReceiver {
        @Override
        public void onReceive(Context context, Intent intent) {
            String action = intent.getAction();
            if (TextUtils.isEmpty(action)) return;

            switch (action) {
                case BleService.ACTION_GATT_CONNECTED:
                    runOnUiThread(() -> {
                        updateConnectionStatus(true);
//                        Toast.makeText(BloodPressureMeasureActivity.this, "Ë°ÄÂéãËÆ°Â∑≤ËøûÊé•", Toast.LENGTH_SHORT).show();
                    });
                    break;
                case BleService.ACTION_GATT_DISCONNECTED:
                    runOnUiThread(() -> {
                        updateConnectionStatus(false, "ËøûÊé•Â∑≤Êñ≠ÂºÄ");
//                        Toast.makeText(BloodPressureMeasureActivity.this, "Ë°ÄÂéãËÆ°Â∑≤Êñ≠ÂºÄ", Toast.LENGTH_SHORT).show();
                    });
                    myBleService.release();
                    break;
                case BleService.ACTION_GATT_SERVICES_DISCOVERD:
//                    Toast.makeText(BloodPressureMeasureActivity.this, "ÂèëÁé∞ÊúçÂä°", Toast.LENGTH_SHORT).show();
                    myBleService.setBleNotification();
                    break;
                case BleService.ACTION_CONNECTING_FAIL:
                    runOnUiThread(() -> {
                        updateConnectionStatus(false, "ËøûÊé•Â§±Ë¥•");
//                        Toast.makeText(BloodPressureMeasureActivity.this, "Ë°ÄÂéãËÆ°ËøûÊé•Â§±Ë¥•", Toast.LENGTH_SHORT).show();
                    });
                    myBleService.disconnect();
                    break;
                case BleService.ACTION_DATA_AVAILABLE:
                    // Â§ÑÁêÜÊï∞ÊçÆ - ÂÆåÂÖ®ÊåâÁÖßÊóßÁâàÊú¨MainActivityÁöÑÈÄªËæë
                    byte[] data = intent.getByteArrayExtra(BleService.EXTRA_DATA);
                    if (data != null && data.length > 0) {
                        String ans = ByteUtils.formatByteArray(data);
                        int i = compute(ans);

                        runOnUiThread(() -> {
                            currentXueya.setText(String.valueOf(i));// Êõ¥Êñ∞TextView
                            chartHelper.updateChartData(i);// Êõ¥Êñ∞ÂõæË°®
                        });

                        // ÊúÄÂêéÊª°Ë∂≥ÁâπÂÆöÊ†ºÂºèÊâç‰ºöÂá∫Áé∞Â§ßÈïø‰∏≤‰∏≤
                        if (data.length >= 17) {
                            ByteUtils.HealthData bloodPressureData = ByteUtils.parseHealthData(data);

                            // Â≠òÂÇ®ÂΩìÂâçËØªÂèñÁöÑÂÄº
                            currentSystolic = bloodPressureData.getSystolic();
                            currentDiastolic = bloodPressureData.getDiastolic();
                            currentPulse = bloodPressureData.getPulse();

                            runOnUiThread(() -> {
                                tvSystolic.setText(bloodPressureData.getSystolic() + " mmHg");
                                tvDiastolic.setText(bloodPressureData.getDiastolic() + " mmHg");
                                tvPulse.setText(bloodPressureData.getPulse() + " bpm");

                                btnSaveData.setEnabled(currentSystolic > 0 && currentDiastolic > 0 && currentPulse > 0);
                                if (currentSystolic > 0) {
                                    enableSaveButton();
                                }
                            });
                        }
                    }
                    break;
                default:
                    break;
            }
        }
    }

    private static Integer compute(String input) {
        String regex = "\\((\\d+)\\)";
        java.util.regex.Matcher matcher = java.util.regex.Pattern.compile(regex).matcher(input);
        Integer ans = null;
        while (matcher.find()) {
            int value = Integer.parseInt(matcher.group(1));
            if (value != 0) ans = value;
        }
        return ans;
    }

    private void updateConnectionStatus(boolean connected) {
        updateConnectionStatus(connected, null);
    }

    private void updateConnectionStatus(boolean connected, String customStatus) {
        if (customStatus != null) {
            tvConnectionStatus.setText(customStatus);
            tvConnectionStatus.setTextColor(0xFF757575);
        } else if (connected) {
            tvConnectionStatus.setText("Â∑≤ËøûÊé•");
            tvConnectionStatus.setTextColor(0xFF4CAF50);
        } else {
            tvConnectionStatus.setText("Êú™ËøûÊé•");
            tvConnectionStatus.setTextColor(0xFF757575);
        }
    }

    private void enableSaveButton() {
        btnSaveData.setEnabled(true);
        btnSaveData.setBackgroundTintList(android.content.res.ColorStateList.valueOf(0xFF4CAF50)); // ÁªøËâ≤
    }

    private void disableSaveButton() {
        btnSaveData.setEnabled(false);
        btnSaveData.setBackgroundTintList(android.content.res.ColorStateList.valueOf(0xFFBDBDBD)); // ÁÅ∞Ëâ≤
    }

    @Override
    public void onClick(View v) {
        if (v.getId() == R.id.btn_back) {
            // ËøîÂõûÊó∂Ëá™Âä®Êñ≠ÂºÄËøûÊé•
            disconnectDevice();
            finish();
        } else if (v.getId() == R.id.btn_save_data) {
            saveMeasurementData();
        }
    }

    private void saveMeasurementData() {
        if (currentSystolic <= 0 || currentDiastolic <= 0 || currentPulse <= 0) {
            Toast.makeText(this, "Êó†ÊúâÊïàÊï∞ÊçÆÂèØ‰øùÂ≠ò", Toast.LENGTH_SHORT).show();
            return;
        }

        SharedPreferences preferences = getSharedPreferences("login_prefs", MODE_PRIVATE);
        int userId = preferences.getInt("user_id", -1);

        long result = measurementDAO.saveMeasurement(userId, currentSystolic, currentDiastolic, currentPulse);

        if (result > 0) {
            Toast.makeText(this, "ÊµãÈáèÊï∞ÊçÆ‰øùÂ≠òÊàêÂäü", Toast.LENGTH_SHORT).show();
            disableSaveButton(); // ‰øùÂ≠òÂêéÁ¶ÅÁî®ÊåâÈíÆ
        } else {
            Toast.makeText(this, "ÊµãÈáèÊï∞ÊçÆ‰øùÂ≠òÂ§±Ë¥•", Toast.LENGTH_SHORT).show();
        }
    }

    private void disconnectDevice() {
        if (myBleService != null) {
            myBleService.disconnect();
        }
        updateConnectionStatus(false, "Â∑≤Êñ≠ÂºÄËøûÊé•");
    }

    @Override
    public void onRequestPermissionsResult(int requestCode, @NonNull String[] permissions, @NonNull int[] grantResults) {
        super.onRequestPermissionsResult(requestCode, permissions, grantResults);

        if (BlePermissionCheck.handlePermisssionsResult(requestCode, permissions, grantResults)) {
            initBle();
            registerBleReceiver();
        } else {
            Toast.makeText(this, "Êú™Êéà‰∫àÊùÉÈôêÔºåÊó†Ê≥ï‰ΩøÁî®ËìùÁâôÂäüËÉΩ", Toast.LENGTH_LONG).show();
        }
    }

    @Override
    protected void onDestroy() {
        super.onDestroy();

        // üî• Ê∏ÖÁêÜÊâ´ÊèèË∂ÖÊó∂Handler
        if (scanTimeoutHandler != null && scanTimeoutRunnable != null) {
            scanTimeoutHandler.removeCallbacks(scanTimeoutRunnable);
        }

        if (myBleReceiver != null) {
            unregisterReceiver(myBleReceiver);
            myBleReceiver = null;
        }
        unbindService(myServiceConnection);
        myBleService = null;
    }
}